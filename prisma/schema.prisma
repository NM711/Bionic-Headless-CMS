// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AuthUser {
  id             String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password       String
  username       String           @unique
  // implement below field later
  //friend_code String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_workspace User_Workspace[]

  @@map("auth_user")
}

model Workspace {
  id             String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  collection     Collection[]
  creation_date  DateTime         @default(now())
  user_workspace User_Workspace[]
  name           String
  key_constraint Boolean          @default(false)
  key            String?          @unique

  @@map("workspace")
}

model Collection {
  id           String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id String    
  name         String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content      Content?

  @@map("collection")
  @@index([workspace_id])
}

model Content {
  id            String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  collection_id String     @unique
  collection    Collection?  @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  headers       Header[]
  textareas     Textarea[]
  images        Image[]

  @@map("content")
}

model Header {
  id         String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_id String
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade)
  text       String

  @@index([content_id])
  @@map("header")
}

model Textarea {
  id         String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_id String
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade)
  text       String

  @@index([content_id])
  @@map("textarea")
}

model Image {
  id         String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_id String
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade)
  byte       Bytes

  @@index([content_id])
  @@map("image")
}

model Role {
  id             String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @unique
  user_workspace User_Workspace[]

  @@map("role")
}

model User_Workspace {
  id           String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String
  role_name    String
  workspace_id String
  role         Role      @relation(fields: [role_name], references: [name], onDelete: Cascade)
  user         AuthUser  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([user_id, workspace_id])
  @@index([user_id, workspace_id])
  @@map("user_workspace")
}